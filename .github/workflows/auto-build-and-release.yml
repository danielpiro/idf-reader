name: Auto Build and Release

on:
  push:
    branches:
      - main  # Trigger on every push to main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual trigger
    inputs:
      increment_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  
jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get full history for version detection
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Dependencies installed successfully"
    
    - name: Auto-increment version
      id: version
      run: |
        # Get current version from version.py
        $currentVersion = (Get-Content version.py | Select-String '__version__ = "(.*)"').Matches[0].Groups[1].Value
        $parts = $currentVersion -split '\.'
        $major = [int]$parts[0]
        $minor = [int]$parts[1]
        $patch = [int]$parts[2]
        
        # Determine increment type
        $incrementType = "patch"  # Default
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $incrementType = "${{ github.event.inputs.increment_type }}"
        } else {
          # Auto-determine from commit messages
          $commitMessages = git log --oneline -10 --pretty=format:"%s"
          if ($commitMessages -match "BREAKING CHANGE|major:") {
            $incrementType = "major"
          } elseif ($commitMessages -match "feat:|feature:|minor:") {
            $incrementType = "minor"
          }
        }
        
        # Increment version
        switch ($incrementType) {
          "major" { $major++; $minor = 0; $patch = 0 }
          "minor" { $minor++; $patch = 0 }
          "patch" { $patch++ }
        }
        
        $newVersion = "$major.$minor.$patch"
        $versionTuple = ($newVersion -split '\.') -join ', '
        
        # Update version.py
        $content = Get-Content version.py -Raw
        $content = $content -replace '__version__ = ".*"', "__version__ = `"$newVersion`""
        $content = $content -replace '__version_info__ = \(.*\)', "__version_info__ = ($versionTuple)"
        Set-Content version.py $content
        
        echo "VERSION=$newVersion" >> $env:GITHUB_OUTPUT
        echo "PREVIOUS_VERSION=$currentVersion" >> $env:GITHUB_OUTPUT
        echo "INCREMENT_TYPE=$incrementType" >> $env:GITHUB_OUTPUT
        echo "Updated version from $currentVersion to $newVersion ($incrementType)"
    
    - name: Generate changelog
      id: changelog
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $prevVersion = "${{ steps.version.outputs.PREVIOUS_VERSION }}"
        
        # Get recent commits for changelog
        $commits = git log --oneline --pretty=format:"%s" -15
        $features = @()
        $fixes = @()
        $improvements = @()
        
        foreach ($commit in $commits) {
          if ($commit -match "^feat:|^feature:") {
            $features += $commit -replace "^feat:|^feature:", ""
          } elseif ($commit -match "^fix:|^bug:") {
            $fixes += $commit -replace "^fix:|^bug:", ""
          } elseif ($commit -match "^perf:|^improve:") {
            $improvements += $commit -replace "^perf:|^improve:", ""
          }
        }
        
        # Build changelog
        $featureText = if ($features.Count -gt 0) { ($features | ForEach-Object { "- $_" }) -join "`n" } else { "- שיפורים כלליים ועדכונים" }
        $fixText = if ($fixes.Count -gt 0) { ($fixes | ForEach-Object { "- $_" }) -join "`n" } else { "- תיקונים ושיפורי יציבות" }
        $improvementText = if ($improvements.Count -gt 0) { ($improvements | ForEach-Object { "- $_" }) -join "`n" } else { "- אופטימיזציה של ביצועי האפליקציה" }
        
        $changelog = "## מה חדש בגרסה $version`n`n" +
                     "### 🎉 תכונות חדשות`n$featureText`n`n" +
                     "### 🐛 תיקון באגים`n$fixText`n`n" +
                     "### ⚡ שיפורי ביצועים`n$improvementText`n`n" +
                     "### 🔧 שיפורים טכניים`n- עדכון תלויות ספריות`n- שיפור אבטחה ויציבות`n- אופטימיזציה של זמני טעינה`n`n" +
                     "### 📥 הורדה והתקנה`n1. הורד את הקובץ idf-reader-$version.exe`n2. הרץ את הקובץ (ללא צורך בהרשאות מנהל)`n3. האפליקציה מוכנה לשימוש!`n`n" +
                     "**תאימות:** Windows 10/11 (64-bit)`n**גודל קובץ:** ~50MB`n**גרסת Python:** 3.11`n`n" +
                     "🤖 גרסה זו נבנתה אוטומטית מקוד מאושר"
        
        # Save changelog to file and output
        Set-Content "CHANGELOG.md" $changelog
        echo "CHANGELOG<<EOF" >> $env:GITHUB_OUTPUT
        echo $changelog >> $env:GITHUB_OUTPUT
        echo "EOF" >> $env:GITHUB_OUTPUT
    
    - name: Create build info
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $buildInfo = @{
          version = $version
          previous_version = "${{ steps.version.outputs.PREVIOUS_VERSION }}"
          build_type = "auto-release"
          build_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          build_timestamp = [int][double]::Parse((Get-Date -UFormat %s))
          platform = "win32"
          python_version = (python --version)
          commit_sha = "${{ github.sha }}"
          commit_message = "${{ github.event.head_commit.message }}"
          repository = "${{ github.repository }}"
          triggered_by = "${{ github.event_name }}"
          increment_type = "${{ steps.version.outputs.INCREMENT_TYPE }}"
        } | ConvertTo-Json -Depth 10
        
        Set-Content build_info.json $buildInfo
        echo "Created build_info.json with version $version"
    
    - name: Build executable
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        echo "Building IDF Reader version: $version"
        
        # Ensure required files exist
        if (-not (Test-Path "main.py")) {
          echo "Error: main.py not found"
          exit 1
        }
        
        if (-not (Test-Path "modern_gui.py")) {
          echo "Warning: modern_gui.py not found, using main.py"
        }
        
        # Use modern_gui.py if available, otherwise main.py
        $entryPoint = if (Test-Path "modern_gui.py") { "modern_gui.py" } else { "main.py" }
        echo "Using entry point: $entryPoint"
        
        # Ensure data directory exists
        if (-not (Test-Path "data")) {
          echo "Creating data directory..."
          New-Item -ItemType Directory -Force -Path data
        }
        
        # Install flet-desktop specifically for PyInstaller
        pip install flet-desktop
        
        # Build with PyInstaller
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name "idf-reader-$version" `
          --add-data "data;data" `
          --add-data "version.py;." `
          --add-data "build_info.json;." `
          --add-data "utils;utils" `
          --add-data "parsers;parsers" `
          --add-data "generators;generators" `
          --add-data "database;database" `
          --add-data "tools;tools" `
          --hidden-import flet `
          --hidden-import flet.flet `
          --hidden-import flet_desktop `
          --hidden-import flet_desktop.version `
          --hidden-import reportlab `
          --hidden-import eppy `
          --hidden-import openpyxl `
          --hidden-import numpy `
          --hidden-import pandas `
          --hidden-import pymongo `
          --hidden-import cryptography `
          --hidden-import pathlib `
          --collect-all flet `
          --collect-all flet_desktop `
          --collect-all reportlab `
          $entryPoint
        
        echo "Build process completed"
        
        # Verify executable was created
        $exePath = "dist\idf-reader-$version.exe"
        if (Test-Path $exePath) {
          $fileSize = (Get-Item $exePath).Length
          $fileSizeMB = [math]::Round($fileSize / 1MB, 1)
          echo "✅ Executable created successfully: $fileSizeMB MB"
          echo "EXECUTABLE_SIZE=$fileSize" >> $env:GITHUB_ENV
        } else {
          echo "❌ Error: Executable was not created"
          Get-ChildItem dist -ErrorAction SilentlyContinue | ForEach-Object { echo "Found in dist: $($_.Name)" }
          exit 1
        }
    
    - name: Test executable
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $exePath = "dist\idf-reader-$version.exe"
        
        if (Test-Path $exePath) {
          echo "Testing executable..."
          
          # Basic file info
          $fileInfo = Get-Item $exePath
          echo "File size: $([math]::Round($fileInfo.Length / 1MB, 1)) MB"
          echo "Created: $($fileInfo.CreationTime)"
          
          # Test that it's a valid executable
          $fileType = (Get-Command $exePath -ErrorAction SilentlyContinue).FileVersionInfo
          if ($fileType) {
            echo "✅ Executable is valid"
          } else {
            echo "⚠️ Warning: Could not verify executable type"
          }
          
          echo "Executable test completed"
        } else {
          echo "❌ Executable not found for testing"
          exit 1
        }
    
    - name: Create release package
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $exePath = "dist\idf-reader-$version.exe"
        
        # Create releases directory
        New-Item -ItemType Directory -Force -Path releases
        
        # Copy executable
        Copy-Item $exePath "releases\idf-reader-$version.exe"
        Copy-Item "CHANGELOG.md" "releases\CHANGELOG-$version.md"
        
        # Create detailed release info
        $fileInfo = Get-Item "releases\idf-reader-$version.exe"
        $releaseInfo = @{
          version = $version
          previous_version = "${{ steps.version.outputs.PREVIOUS_VERSION }}"
          filename = $fileInfo.Name
          size_bytes = $fileInfo.Length
          size_mb = [math]::Round($fileInfo.Length / 1MB, 1)
          release_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          build_commit = "${{ github.sha }}"
          increment_type = "${{ steps.version.outputs.INCREMENT_TYPE }}"
          download_url = "https://github.com/${{ github.repository }}/releases/download/v$version/idf-reader-$version.exe"
          system_requirements = @{
            os = "Windows 10/11"
            architecture = "x64"
            minimum_ram = "4GB"
            disk_space = "100MB"
          }
          features = @(
            "ניתוח קבצי IDF מתקדם",
            "יצירת דוחות PDF ו-Excel",
            "תמיכה בתקני ISO ישראליים",
            "ממשק משתמש בעברית",
            "מערכת רישוי מתקדמת"
          )
        } | ConvertTo-Json -Depth 10
        
        Set-Content "releases\release-$version.json" $releaseInfo
        echo "✅ Release package created: $($fileInfo.Name) ($([math]::Round($fileInfo.Length / 1MB, 1)) MB)"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: idf-reader-build-${{ steps.version.outputs.VERSION }}
        path: |
          releases/idf-reader-${{ steps.version.outputs.VERSION }}.exe
          releases/release-${{ steps.version.outputs.VERSION }}.json
          releases/CHANGELOG-${{ steps.version.outputs.VERSION }}.md
          build_info.json
        retention-days: 30
    
    - name: Commit version update
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Bot"
        
        # Add updated files
        git add version.py
        git add build_info.json
        
        # Check if there are changes to commit
        $changes = git diff --staged --name-only
        if ($changes) {
          git commit -m "🤖 Auto-increment version to $version [skip ci]`n`n- Updated from ${{ steps.version.outputs.PREVIOUS_VERSION }} to $version`n- Increment type: ${{ steps.version.outputs.INCREMENT_TYPE }}`n- Auto-generated by GitHub Actions"
          
          echo "✅ Version committed to repository"
        } else {
          echo "ℹ️ No version changes to commit"
        }
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true')
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: גרסה ${{ steps.version.outputs.VERSION }} 🚀
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        files: |
          releases/idf-reader-${{ steps.version.outputs.VERSION }}.exe
          releases/release-${{ steps.version.outputs.VERSION }}.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update website download link
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        # Update website script.js with new download URL
        if (Test-Path "website\script.js") {
          $scriptContent = Get-Content "website\script.js" -Raw
          $newUrl = "https://github.com/${{ github.repository }}/releases/download/v$version/idf-reader-$version.exe"
          
          # Update the download URL in the script
          $scriptContent = $scriptContent -replace "releases/download/v[\d\.]+/idf-reader-[\d\.]+\.exe", "releases/download/v$version/idf-reader-$version.exe"
          Set-Content "website\script.js" $scriptContent
          
          echo "✅ Updated website download link to version $version"
        }
    
    - name: Deploy to GitHub Pages (if website updated)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./website
        publish_branch: gh-pages
        commit_message: 🚀 Deploy website with version ${{ steps.version.outputs.VERSION }}
    
    - name: Cleanup
      run: |
        # Clean up build artifacts but keep releases
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        echo "✅ Build cleanup completed"
    
    - name: Summary
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        $prevVersion = "${{ steps.version.outputs.PREVIOUS_VERSION }}"
        $incrementType = "${{ steps.version.outputs.INCREMENT_TYPE }}"
        
        echo "🎉 Build Summary:"
        echo "=================="
        echo "✅ Version: $prevVersion → $version ($incrementType)"
        echo "✅ Executable: idf-reader-$version.exe"
        echo "✅ Size: $([math]::Round($env:EXECUTABLE_SIZE / 1MB, 1)) MB"
        echo "✅ Platform: Windows 10/11 (x64)"
        echo "✅ Release: Created and published"
        echo "✅ Website: Updated with new download link"
        echo ""
        echo "🔗 Download: https://github.com/${{ github.repository }}/releases/latest"
        echo "📋 Changelog: See release notes for details"