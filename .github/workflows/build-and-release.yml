name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.1)'
        required: true
        default: '1.0.1'

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "Dependencies installed successfully"
    
    - name: Get version from tag or input
      id: get_version
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $version = "${{ github.ref_name }}".TrimStart("v")
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Building version: $version"
    
    - name: Update version in code
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $versionTuple = ($version -split '\.') -join ', '
        
        # Update version.py
        $content = Get-Content version.py -Raw
        $content = $content -replace '__version__ = ".*"', "__version__ = `"$version`""
        $content = $content -replace '__version_info__ = \(.*\)', "__version_info__ = ($versionTuple)"
        Set-Content version.py $content
        
        echo "Updated version to $version"
    
    - name: Create build info
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $buildInfo = @{
          version = $version
          build_type = "release"
          build_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
          build_timestamp = [int][double]::Parse((Get-Date -UFormat %s))
          platform = "win32"
          python_version = (python --version)
          commit_sha = "${{ github.sha }}"
          repository = "${{ github.repository }}"
        } | ConvertTo-Json -Depth 10
        
        Set-Content build_info.json $buildInfo
        echo "Created build_info.json"
    
    - name: Build executable
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        echo "Building version: $version"
        
        # Check if main.py exists
        if (-not (Test-Path "main.py")) {
          echo "Error: main.py not found"
          exit 1
        }
        
        # Check if data directory exists
        if (-not (Test-Path "data")) {
          echo "Warning: data directory not found, creating empty one"
          New-Item -ItemType Directory -Force -Path data
        }
        
        # Run PyInstaller (removed icon for now to avoid path issues)
        python -m PyInstaller `
          --onefile `
          --windowed `
          --name "idf-reader-$version" `
          --add-data "data;data" `
          --add-data "version.py;." `
          --add-data "build_info.json;." `
          --hidden-import flet `
          --hidden-import reportlab `
          --hidden-import eppy `
          --hidden-import openpyxl `
          --hidden-import numpy `
          --hidden-import pandas `
          --collect-all flet `
          main.py
        
        echo "Build completed"
        
        # Check if executable was created
        if (Test-Path "dist\idf-reader-$version.exe") {
          $fileSize = (Get-Item "dist\idf-reader-$version.exe").Length
          echo "Executable created successfully: $fileSize bytes"
        } else {
          echo "Error: Executable was not created"
          exit 1
        }
    
    - name: Create release package
      run: |
        $version = "${{ steps.get_version.outputs.VERSION }}"
        $exePath = "dist\idf-reader-$version.exe"
        
        if (Test-Path $exePath) {
          # Create releases directory
          New-Item -ItemType Directory -Force -Path releases
          
          # Copy executable
          Copy-Item $exePath "releases\idf-reader-$version.exe"
          
          # Create release info
          $fileInfo = Get-Item "releases\idf-reader-$version.exe"
          $releaseInfo = @{
            version = $version
            filename = $fileInfo.Name
            size = $fileInfo.Length
            release_date = (Get-Date).ToString("yyyy-MM-ddTHH:mm:ssZ")
            changelog = @(
              "שיפור ביצועים והתקנה",
              "תיקון באגים",
              "שיפורים בממשק המשתמש"
            )
          } | ConvertTo-Json -Depth 10
          
          Set-Content "releases\release-$version.json" $releaseInfo
          
          echo "Release package created: $($fileInfo.Name) ($($fileInfo.Length) bytes)"
        } else {
          echo "Error: Executable not found at $exePath"
          exit 1
        }
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: idf-reader-${{ steps.get_version.outputs.VERSION }}
        path: |
          releases/idf-reader-${{ steps.get_version.outputs.VERSION }}.exe
          releases/release-${{ steps.get_version.outputs.VERSION }}.json
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event_name == 'push' && github.ref_name || format('v{0}', github.event.inputs.version) }}
        name: גרסה ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## מה חדש בגרסה ${{ steps.get_version.outputs.VERSION }}
          
          ### 🎉 תכונות חדשות
          - שיפור ביצועים כללי
          - עדכון ממשק המשתמש
          - תיקון באגים
          
          ### 🔧 שיפורים טכניים
          - שיפור יציבות האפליקציה
          - אופטימיזציה של זמני טעינה
          - עדכון ספריות תלות
          
          ### 📥 הורדה והתקנה
          1. הורד את הקובץ `idf-reader-${{ steps.get_version.outputs.VERSION }}.exe`
          2. הרץ את הקובץ כמנהל (Administrator)
          3. עקוב אחר הוראות ההתקנה
          
          **גודל קובץ:** ~50MB  
          **תאימות:** Windows 10/11  
          **גרסת Python:** 3.11
          
          ---
          
          🤖 גרסה זו נבנתה אוטומטית ב-GitHub Actions
        files: |
          releases/idf-reader-${{ steps.get_version.outputs.VERSION }}.exe
          releases/release-${{ steps.get_version.outputs.VERSION }}.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Cleanup
      run: |
        # Remove build artifacts but keep releases
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "*.spec") { Remove-Item -Force "*.spec" }
        echo "Cleanup completed"